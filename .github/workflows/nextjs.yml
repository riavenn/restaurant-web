# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# Next.js hakkında daha fazla bilgi için: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages # İş akışınızın adı

on:
  # Varsayılan dalınıza (genellikle 'main') yapılan push'larda çalışır.
  push:
    branches: ["main"] # Eğer ana dalınız 'master' ise burayı 'master' olarak güncelleyin.

  # Bu, iş akışını Actions sekmesinden manuel olarak çalıştırmanıza olanak tanır.
  workflow_dispatch:

# GITHUB_TOKEN'ın GitHub Pages'a dağıtım yapmasına izin veren izinleri ayarlar.
permissions:
  contents: read
  pages: write
  id-token: write

# Sadece bir eşzamanlı dağıtıma izin verir, devam eden ve en son sıraya alınmış çalıştırmalar arasındaki kuyruğa alınmışları atlar.
# Ancak, devam eden çalıştırmaları iptal etmez, çünkü bu üretim dağıtımlarının tamamlanmasını isteriz.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build işi: Projeyi oluşturur ve statik çıktıları hazırlar
  build:
    runs-on: ubuntu-latest # İşin çalışacağı işletim sistemi
    steps:
      - name: Checkout 🛎️ # Depo kodunuzu sanal makineye klonlar
        uses: actions/checkout@v4
      
      - name: Detect package manager 📦 # Projenizde hangi paket yöneticisinin (npm, yarn) kullanıldığını tespit eder
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node ☕ # Node.js ortamını kurar
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Kullandığınız Node.js sürümüne göre bu değeri güncelleyin (örn. "18", "20", "22").
          cache: ${{ steps.detect-package-manager.outputs.manager }} # Paket önbelleğini kurar
      
      - name: Setup Pages ⚙️ # GitHub Pages ortamını Next.js için yapılandırır
        uses: actions/configure-pages@v5
        with:
          # Bu adım, Next.js yapılandırma dosyanıza (next.config.js) otomatik olarak
          # 'basePath' enjekte eder ve sunucu tarafı görüntü optimizasyonunu devre dışı bırakır.
          # (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # Yapılandırmayı kendiniz yönetmek isterseniz bu satırı kaldırabilirsiniz.
          static_site_generator: next
      
      - name: Restore cache ⚡ # Önceki çalıştırmalardan gelen bağımlılık önbelleğini geri yükler
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Paketler veya kaynak dosyalar değiştiğinde yeni bir önbellek oluşturur.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # Kaynak dosyalar değiştiyse ancak paketler değişmediyse, önceki bir önbellekten yeniden oluşturur.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      
      - name: Install dependencies 📥 # Proje bağımlılıklarını yükler (npm install veya yarn install)
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Build with Next.js 🚀 # Next.js projesini oluşturur
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      
      - name: Upload artifact ⬆️ # Oluşturulan çıktıları (statik dosyaları) bir yapıt olarak yükler
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out # Next.js'in statik çıktılarının bulunduğu klasör (next.config.js'de 'output: export' ayarı varsa 'out' klasörüne çıkar).

  # Deployment işi: Oluşturulan yapıtları GitHub Pages'a dağıtır
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Bu işin, 'build' işi tamamlandıktan sonra çalışmasını sağlar
    steps:
      - name: Deploy to GitHub Pages 🎉 # GitHub Pages'a dağıtım işlemini gerçekleştirir
        id: deployment
        uses: actions/deploy-pages@v4
